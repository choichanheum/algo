# DFS 예제 5-8. 
# Depth First Search 깊이 우선 탐색.
# 1. 탐색 시작 노드를 스택에 삽입한 뒤 방문처리
# 2. 스택의 최상단 노드에 방문하지 않은 인접 노드가 있으면 그 인접 노드를 스택에 넣고 방문 처리. 방문하지 않은 인접 노드가 없으면 최상단 노드를 스택에서 꺼낸다.
# 3. 2번을 더 이상 수행할 수 없을때까지 반복
# 방문 처리는 스택에 한번 삽입되어 처리된 노드를 다시 삽입되지 않게 체크하는 것
# DFS 기능을 생각하면 순서는 상관없지만, 코테에서는 번호가 낮은 순부터 처리되도록 명시하는 경우가 종종 있으므로 관행적으로 번호가 낮은 순으로 처리하도록 구현하는 편
# DFS는 스택을 이용하는 알고리즘이므로, 실제 구현은 재귀 함수를 이용했을 때 더욱 간결하다.

'''
입력값


출력값

'''

# DFS 메서드 정의
def dfs(graph, v, visited):
    # 현재 노드를 방문 처리
    visited[v] = True
    print(v+1, end = ' ')
    # 현재 노드와 연결된 다른 노드를 재귀적으로 방문
    for i in graph[v]:
        if not visited[i-1]:
            dfs(graph, i-1, visited)

# 각 노드가 연결된 정보를 리스트 자료형으로 표현 (2차원 리스트)
graph = [
    [2, 3, 8],
    [1, 7],
    [1, 4, 5],
    [3, 5],
    [3, 4],
    [7],
    [2, 6, 8],
    [1, 7]
]

# 각 노드가 방문된 정보를 리스트 자료형으로 표현 (1차원 리스트)
visited = [False]*8

# 정의된 DFS 함수 호출
dfs(graph, 0, visited)

print(visited)