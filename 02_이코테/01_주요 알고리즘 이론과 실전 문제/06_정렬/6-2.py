# 삽입 정렬 예제 6-2.
# 선택 정렬에 비해 구현 난이도가 높은 편이지만, 실행 시간 측면에서 더 효율적이다.
# 필요할 때만 위치를 바꾸므로 '데이터가 거의 정렬되어 있을 때' 훨씬 효율적이다.
# 첫번째 데이터는 그 자체로 정렬되어 있다고 판단하기 때문에 두번째 데이터부터 시작한다.
# 삽입 정렬의 시간복잡도는 O(N²) 이며, 최선의 경우(이미 정렬되어있을때) O(N)의 시간복잡도를 갖는다.
# 다음 배울 퀵 정렬과 비교했을 때, 보통은 삽입 정렬이 비효율적이나 정렬이 거의 되어 있는 상황에서는 퀵 정렬보다 강력하다.

'''
입력값



출력값

'''

array = [7, 5, 9, 0, 3 , 1, 6, 2, 4, 8]

for i in range(1, len(array)):
    for j in range(i, 0, -1): # 인덱스 i부터 1까지 1씩 감소하며 반복하는 문법
        if array[j] < array[j-1]: # 한 칸씩 왼쪽으로 이동
            array[j], array[j-1] = array[j-1], array[j]
        else: # 자기보다 작은 데이터를 만나면 그 위치에서 멈춤
            break
        print(array)

print()
print(array)